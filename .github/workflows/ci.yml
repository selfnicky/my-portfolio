name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 1️⃣ Setup tools
      - name: Set up Node.js (for lint/test) # Change if Python, Go, etc.
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install   # Or pip install -r requirements.txt, etc.

      # 2️⃣ Run linting
      - name: Run Linter
        run: npm run lint || echo "Lint warnings found"

      # 3️⃣ Run tests
      - name: Run Unit Tests
        run: npm test --if-present

      # 4️⃣ Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.REGISTRY_USER }}/portfolio:${{ github.run_number }} .
          docker build -t ${{ secrets.REGISTRY_USER }}/portfolio .

      # 5️⃣ Trivy Security Scan
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ secrets.REGISTRY_USER }}/portfolio:${{ github.run_number }}
          format: table
          exit-code: 1         # fail if HIGH/CRITICAL vulnerabilities
          ignore-unfixed: true

      # 6️⃣ Push image to registry
      - name: Push Docker image
        if: success()
        env:
          REGISTRY_USER: ${{ secrets.REGISTRY_USER }}
          REGISTRY_PASS: ${{ secrets.REGISTRY_PASS }}
        run: |
          echo "$REGISTRY_PASS" | docker login -u "$REGISTRY_USER" --password-stdin
          docker push $REGISTRY_USER/portfolio:${{ github.run_number }}
          docker push $REGISTRY_USER/portfolio

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # 7️⃣ Deploy via SSH to server
      - name: SSH to Server and Deploy
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          # port: ${{ secrets.PORT }}
          script: |
            docker rm -f resume || true
            docker pull ${{ secrets.REGISTRY_USER }}/portfolio:${{ github.run_number }}
            docker run -d --name resume -p 8080:5001 ${{ secrets.REGISTRY_USER }}/portfolio:${{ github.run_number }}
